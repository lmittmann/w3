// Code generated by "go generate"; DO NOT EDIT.
package fourbyte

import "github.com/lmittmann/w3"

var functions = map[[4]byte]*w3.Func{
	{0x01, 0xff, 0xc9, 0xa7}: w3.MustNewFunc("supportsInterface(bytes4)", "bool"),
	{0x02, 0x2c, 0x0d, 0x9f}: w3.MustNewFunc("swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data)", ""),
	{0x02, 0x75, 0x1c, 0xec}: w3.MustNewFunc("removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)", "uint256 amountToken, uint256 amountETH"),
	{0x02, 0xcc, 0x25, 0x0d}: w3.MustNewFunc("isSolver(address)", "bool"),
	{0x05, 0x4d, 0x50, 0xd4}: w3.MustNewFunc("getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)", "uint256 amountOut"),
	{0x05, 0x8a, 0x62, 0x8f}: w3.MustNewFunc("setAuthorizer(address newAuthorizer)", ""),
	{0x06, 0xfd, 0xde, 0x03}: w3.MustNewFunc("name()", "string"),
	{0x07, 0x21, 0x1e, 0xf7}: w3.MustNewFunc("get_dy_underlying(int128 i, int128 j, uint256 amount)", "uint256"),
	{0x08, 0x18, 0x12, 0xfc}: w3.MustNewFunc("getApproved(uint256 tokenId)", "address operator"),
	{0x08, 0xc3, 0x79, 0xa0}: w3.MustNewFunc("Error(string)", ""),
	{0x09, 0x02, 0xf1, 0xac}: w3.MustNewFunc("getReserves()", "uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast"),
	{0x09, 0x5e, 0xa7, 0xb3}: w3.MustNewFunc("approve(address spender, uint256 amount)", "bool success"),
	{0x0c, 0x03, 0x3b, 0x9b}: w3.MustNewFunc("swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, uint256 amountLimit, uint256 deadline, bytes data)", "int256 amount0, int256 amount1"),
	{0x0d, 0x58, 0xb1, 0xdb}: w3.MustNewFunc("transferFrom((address from, address to, uint160 amount, address token)[] transferDetails)", ""),
	{0x0d, 0xfe, 0x16, 0x81}: w3.MustNewFunc("token0()", "address"),
	{0x0f, 0x5a, 0x6e, 0xfa}: w3.MustNewFunc("getInternalBalance(address user, address[] tokens)", "uint256[]"),
	{0x12, 0x49, 0xc5, 0x8b}: w3.MustNewFunc("mint()", ""),
	{0x12, 0x8a, 0xcb, 0x08}: w3.MustNewFunc("swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data)", "int256 amount0, int256 amount1"),
	{0x13, 0xd7, 0x9a, 0x0b}: w3.MustNewFunc("settle(address[] tokens, uint256[] clearingPrices, (uint256 sellTokenIndex, uint256 buyTokenIndex, address receiver, uint256 sellAmount, uint256 buyAmount, uint32 validTo, bytes32 appData, uint256 feeAmount, uint256 flags, uint256 executedAmount, bytes signature)[] trades, (address target, uint256 value, bytes callData)[][3] interactions)", ""),
	{0x15, 0x0b, 0x7a, 0x02}: w3.MustNewFunc("onERC721Received(address operator, address from, uint256 tokenId, bytes data)", "bytes4"),
	{0x16, 0x26, 0xba, 0x7e}: w3.MustNewFunc("isValidSignature(bytes32 hash, bytes data)", "bytes4"),
	{0x17, 0x32, 0x60, 0xeb}: w3.MustNewFunc("settleInternal((address taker, address receiver, uint256 expiry, uint256 nonce, address executor, uint16 minFillPercent, bytes32 hooksHash, address[] sellTokens, address[] buyTokens, uint256[] sellAmounts, uint256[] buyAmounts, uint256[] sellNFTIds, uint256[] buyNFTIds, bytes sellTokenTransfers, bytes buyTokenTransfers) order, (uint8 type, bytes signatureBytes) signature, ((bool result, address to, uint256 value, bytes data)[] beforeSettle, (bool result, address to, uint256 value, bytes data)[] afterSettle) hooks, (uint256[] increasedBuyAmounts, uint16 curFillPercent) makerData)", ""),
	{0x17, 0x7e, 0x80, 0x2f}: w3.MustNewFunc("ERC721InsufficientApproval(address operator, uint256 tokenId)", ""),
	{0x18, 0x16, 0x0d, 0xdd}: w3.MustNewFunc("totalSupply()", "uint256"),
	{0x18, 0xcb, 0xaf, 0xe5}: w3.MustNewFunc("swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)", "uint256[] amounts"),
	{0x18, 0xfd, 0xd0, 0x6b}: w3.MustNewFunc("getGrossAmountFromTotalSold(uint256 totalAmount)", "uint256"),
	{0x1a, 0x68, 0x65, 0x02}: w3.MustNewFunc("liquidity()", "uint128"),
	{0x1c, 0x56, 0x03, 0x05}: w3.MustNewFunc("claimMintRewardAndShare(address other, uint256 pct)", ""),
	{0x1f, 0x00, 0xca, 0x74}: w3.MustNewFunc("getAmountsIn(uint256 amountOut, address[] path)", "uint256[] amounts"),
	{0x20, 0xc1, 0x3b, 0x0b}: w3.MustNewFunc("isValidSignature(bytes data, bytes signature)", "bytes4"),
	{0x21, 0x4a, 0x6f, 0xe2}: w3.MustNewFunc("accumulateReward(uint32 currTimestamp)", ""),
	{0x21, 0x95, 0x99, 0x5c}: w3.MustNewFunc("removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)", "uint256 amountA, uint256 amountB"),
	{0x23, 0xa6, 0x9e, 0x75}: w3.MustNewFunc("pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data)", ""),
	{0x23, 0xb8, 0x72, 0xdd}: w3.MustNewFunc("transferFrom(address from, address to, uint256 amount)", "bool success"),
	{0x24, 0x85, 0x6b, 0xc3}: w3.MustNewFunc("execute(bytes commands, bytes[] inputs)", ""),
	{0x24, 0x8a, 0x9c, 0xa3}: w3.MustNewFunc("getRoleAdmin(bytes32 role)", "bytes32"),
	{0x28, 0xb2, 0xa7, 0x96}: w3.MustNewFunc("settleInternalWithPermitsSignatures((address taker, address receiver, uint256 expiry, uint256 nonce, address executor, uint16 minFillPercent, bytes32 hooksHash, address[] sellTokens, address[] buyTokens, uint256[] sellAmounts, uint256[] buyAmounts, uint256[] sellNFTIds, uint256[] buyNFTIds, bytes sellTokenTransfers, bytes buyTokenTransfers) order, (uint8 type, bytes signatureBytes) signature, (bytes[] permitSignatures, bytes signatureBytesPermit2, uint48[] noncesPermit2, uint48 deadline) takerPermitsInfo, ((bool result, address to, uint256 value, bytes data)[] beforeSettle, (bool result, address to, uint256 value, bytes data)[] afterSettle) hooks, (uint256[] increasedBuyAmounts, uint16 curFillPercent) makerData)", ""),
	{0x2a, 0x2d, 0x80, 0xd1}: w3.MustNewFunc("permit(address owner, ((address token, uint160 amount, uint48 expiration, uint48 nonce)[] details, address spender, uint256 sigDeadline) permitBatch, bytes signature)", ""),
	{0x2e, 0x1a, 0x7d, 0x4d}: w3.MustNewFunc("withdraw(uint256)", ""),
	{0x2f, 0x2f, 0xf1, 0x5d}: w3.MustNewFunc("grantRole(bytes32 role, address account)", ""),
	{0x31, 0x3c, 0xe5, 0x67}: w3.MustNewFunc("decimals()", "uint8"),
	{0x35, 0x93, 0x56, 0x4c}: w3.MustNewFunc("execute(bytes commands, bytes[] inputs, uint256 deadline)", ""),
	{0x36, 0x44, 0xe5, 0x15}: w3.MustNewFunc("DOMAIN_SEPARATOR()", "bytes32"),
	{0x36, 0x56, 0x8a, 0xbe}: w3.MustNewFunc("renounceRole(bytes32 role, address account)", ""),
	{0x36, 0xc7, 0x85, 0x16}: w3.MustNewFunc("transferFrom(address from, address to, uint160 amount, address token)", ""),
	{0x38, 0x50, 0xc7, 0xbd}: w3.MustNewFunc("slot0()", "(uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked)"),
	{0x38, 0xe9, 0x92, 0x2e}: w3.MustNewFunc("setSwapFeePercentage(uint256)", ""),
	{0x38, 0xed, 0x17, 0x39}: w3.MustNewFunc("swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)", "uint256[] amounts"),
	{0x39, 0x47, 0x47, 0xc5}: w3.MustNewFunc("exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth)", ""),
	{0x39, 0x50, 0x93, 0x51}: w3.MustNewFunc("increaseAllowance(address spender, uint256 addedValue)", "bool success"),
	{0x3a, 0x98, 0xef, 0x39}: w3.MustNewFunc("totalShares()", "uint256"),
	{0x3d, 0xf0, 0x21, 0x24}: w3.MustNewFunc("exchange(int128 i, int128 j, uint256 dx, uint256 min_dy)", ""),
	{0x3f, 0x44, 0x28, 0x64}: w3.MustNewFunc("swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, uint256 amountLimit, uint256 deadline, bytes data, uint256 trackingCode)", "int256 amount0, int256 amount1"),
	{0x40, 0xc1, 0x0f, 0x19}: w3.MustNewFunc("mint(address to, uint256 amount)", ""),
	{0x40, 0xfb, 0x07, 0xa0}: w3.MustNewFunc("buyAsset(uint256 minAmount, address receiver)", "uint256, uint256"),
	{0x42, 0x84, 0x2e, 0x0e}: w3.MustNewFunc("safeTransferFrom(address from, address to, uint256 tokenId)", ""),
	{0x42, 0x96, 0x6c, 0x68}: w3.MustNewFunc("burn(uint256)", ""),
	{0x45, 0xd6, 0x49, 0x4d}: w3.MustNewFunc("getBuyFee(uint256 grossAmount)", "uint256"),
	{0x46, 0x09, 0x85, 0xe8}: w3.MustNewFunc("swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, uint256 trackingCode)", "int256 amount0, int256 amount1"),
	{0x46, 0x0d, 0xd9, 0x49}: w3.MustNewFunc("settleBatch((address taker, address receiver, uint256 expiry, uint256 nonce, address executor, uint16 minFillPercent, bytes32 hooksHash, address[] sellTokens, address[] buyTokens, uint256[] sellAmounts, uint256[] buyAmounts, uint256[] sellNFTIds, uint256[] buyNFTIds, bytes sellTokenTransfers, bytes buyTokenTransfers)[] orders, (uint8 type, bytes signatureBytes)[] signatures, (bytes[] permitSignatures, bytes signatureBytesPermit2, uint48[] noncesPermit2, uint48 deadline)[] takersPermitsInfo, (bool result, address to, uint256 value, bytes data)[] interactions, ((bool result, address to, uint256 value, bytes data)[] beforeSettle, (bool result, address to, uint256 value, bytes data)[] afterSettle)[] hooks, (address balanceRecipient, uint16[] curFillPercents, bool[] takersPermitsUsage, bool transferExactAmounts) solverData)", ""),
	{0x46, 0x14, 0x13, 0x19}: w3.MustNewFunc("feeGrowthGlobal1X128()", "uint256"),
	{0x48, 0x5c, 0xc9, 0x55}: w3.MustNewFunc("initialize(address token0, address token1)", ""),
	{0x49, 0x0e, 0x6c, 0xbc}: w3.MustNewFunc("flash(address recipient, uint256 amount0, uint256 amount1, bytes data)", ""),
	{0x49, 0x3f, 0x4f, 0x74}: w3.MustNewFunc("get_address(uint256 idx)", "address"),
	{0x4a, 0x25, 0xd9, 0x4a}: w3.MustNewFunc("swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)", "uint256[] amounts"),
	{0x4a, 0x2a, 0xb3, 0xbe}: w3.MustNewFunc("get_y(uint256 ANN, uint256 gamma, uint256[3] x, uint256 D, uint256 i)", "uint256[2]"),
	{0x4c, 0x84, 0xc1, 0xc8}: w3.MustNewFunc("wrapAll()", ""),
	{0x52, 0xbb, 0xbe, 0x29}: w3.MustNewFunc("swap((bytes32 poolId, uint8 swapKind, address assetIn, address assetOut, uint256 amount, bytes data) singleSwap, (address sender, bool fromInternalBalance, address recipient, bool toInternalBalance) funds, uint256 limit, uint256 deadline)", "uint256"),
	{0x52, 0xc7, 0xf8, 0xdc}: w3.MustNewFunc("claimMintReward()", ""),
	{0x54, 0x0d, 0x49, 0x18}: w3.MustNewFunc("lmPool()", "address"),
	{0x54, 0xfd, 0x4d, 0x50}: w3.MustNewFunc("version()", "uint256"),
	{0x57, 0x4f, 0x2b, 0xa3}: w3.MustNewFunc("allPairsLength()", "uint256"),
	{0x59, 0x09, 0xc0, 0xd5}: w3.MustNewFunc("price0CumulativeLast()", "uint256"),
	{0x59, 0x21, 0xc8, 0xe0}: w3.MustNewFunc("burnAfterSeize(uint256 amount)", "uint256"),
	{0x5a, 0x3d, 0x54, 0x93}: w3.MustNewFunc("price1CumulativeLast()", "uint256"),
	{0x5b, 0x08, 0xba, 0x18}: w3.MustNewFunc("ERC721InvalidOperator(address operator)", ""),
	{0x5b, 0x0d, 0x59, 0x84}: w3.MustNewFunc("removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)", "uint256 amountETH"),
	{0x5b, 0x41, 0xb9, 0x08}: w3.MustNewFunc("exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy)", ""),
	{0x5b, 0xcc, 0xb4, 0xc4}: w3.MustNewFunc("claimMintRewardAndStake(uint256 pct, uint256 term)", ""),
	{0x5c, 0x11, 0xd7, 0x95}: w3.MustNewFunc("swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)", ""),
	{0x5c, 0x60, 0xda, 0x1b}: w3.MustNewFunc("implementation()", "address"),
	{0x5c, 0x97, 0x5a, 0xbb}: w3.MustNewFunc("paused()", "bool"),
	{0x5d, 0xed, 0x74, 0xa5}: w3.MustNewFunc("getGhoPriceInAsset(uint256 ghoAmount, bool roundUp)", "uint256"),
	{0x5e, 0x0d, 0x44, 0x3f}: w3.MustNewFunc("get_dy(int128 i, int128 j, uint256 amount)", "uint256"),
	{0x60, 0x52, 0x97, 0xe1}: w3.MustNewFunc("seize()", "uint256"),
	{0x63, 0x52, 0x21, 0x1e}: w3.MustNewFunc("ownerOf(uint256 tokenId)", "address"),
	{0x64, 0x28, 0x3d, 0x7b}: w3.MustNewFunc("ERC721IncorrectOwner(address sender, uint256 tokenId, address owner)", ""),
	{0x64, 0xa0, 0xae, 0x92}: w3.MustNewFunc("ERC721InvalidReceiver(address receiver)", ""),
	{0x69, 0x62, 0xf8, 0x45}: w3.MustNewFunc("mint_relative(address to, uint256 frac)", "uint256"),
	{0x6d, 0x54, 0x33, 0xe6}: w3.MustNewFunc("max(uint256, uint256)", "uint256"),
	{0x70, 0xa0, 0x82, 0x31}: w3.MustNewFunc("balanceOf(address)", "uint256"),
	{0x71, 0x50, 0x18, 0xa6}: w3.MustNewFunc("renounceOwnership()", ""),
	{0x72, 0x84, 0xe4, 0x16}: w3.MustNewFunc("description()", "string"),
	{0x73, 0xc6, 0xac, 0x6e}: w3.MustNewFunc("ERC721InvalidSender(address sender)", ""),
	{0x74, 0x64, 0xfc, 0x3d}: w3.MustNewFunc("kLast()", "uint256"),
	{0x75, 0x19, 0xab, 0x50}: w3.MustNewFunc("updatedAt()", "uint256"),
	{0x75, 0x4b, 0x76, 0xb3}: w3.MustNewFunc("get_p(uint256[3] xp, uint256 D, uint256[2] A_gamma)", "uint256[2]"),
	{0x75, 0xd3, 0x9e, 0xcb}: w3.MustNewFunc("swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, uint256 amountLimit, uint256 deadline)", "int256 amount0, int256 amount1"),
	{0x79, 0x1a, 0xc9, 0x47}: w3.MustNewFunc("swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)", ""),
	{0x79, 0xcc, 0x67, 0x90}: w3.MustNewFunc("burnFrom(address to, uint256 value)", "bool"),
	{0x7a, 0xe2, 0xb5, 0xc7}: w3.MustNewFunc("min(uint256, uint256)", "uint256"),
	{0x7b, 0x04, 0x72, 0xf0}: w3.MustNewFunc("stake(uint256 amount, uint256 term)", ""),
	{0x7b, 0x12, 0xe0, 0x09}: w3.MustNewFunc("newton_D(uint256 ANN, uint256 gamma, uint256[3] x_unsorted, uint256 K0_prev)", "uint256"),
	{0x7d, 0x10, 0xd1, 0x1f}: w3.MustNewFunc("transferFromAccounts((address account, address token, uint256 amount, bytes32 balance)[])", ""),
	{0x7e, 0x27, 0x32, 0x89}: w3.MustNewFunc("ERC721NonexistentToken(uint256 tokenId)", ""),
	{0x7f, 0xf3, 0x6a, 0xb5}: w3.MustNewFunc("swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)", "uint256[] amounts"),
	{0x81, 0xd1, 0x8d, 0x87}: w3.MustNewFunc("wad_exp(int256 power)", "uint256"),
	{0x85, 0xf8, 0xc2, 0x59}: w3.MustNewFunc("getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)", "uint256 amountIn"),
	{0x87, 0x52, 0x8f, 0x13}: w3.MustNewFunc("settle((address taker, address receiver, uint256 expiry, uint256 nonce, address executor, uint16 minFillPercent, bytes32 hooksHash, address[] sellTokens, address[] buyTokens, uint256[] sellAmounts, uint256[] buyAmounts, uint256[] sellNFTIds, uint256[] buyNFTIds, bytes sellTokenTransfers, bytes buyTokenTransfers) order, (uint8 type, bytes signatureBytes) signature, (bool result, address to, uint256 value, bytes data)[] interactions, ((bool result, address to, uint256 value, bytes data)[] beforeSettle, (bool result, address to, uint256 value, bytes data)[] afterSettle) hooks, (address balanceRecipient, uint16 curFillPercent) solverData)", ""),
	{0x88, 0x03, 0xdb, 0xee}: w3.MustNewFunc("swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)", "uint256[] amounts"),
	{0x89, 0xc6, 0x2b, 0x64}: w3.MustNewFunc("ERC721InvalidOwner(address owner)", ""),
	{0x8d, 0xa5, 0xcb, 0x5b}: w3.MustNewFunc("owner()", "address"),
	{0x90, 0x10, 0xd0, 0x7c}: w3.MustNewFunc("getRoleMember(bytes32 role, uint256 index)", "address"),
	{0x91, 0xd1, 0x48, 0x54}: w3.MustNewFunc("hasRole(bytes32 role, address account)", "bool"),
	{0x92, 0x7d, 0xa1, 0x05}: w3.MustNewFunc("allowance(address user, address token, address spender)", "uint160 amount, uint48 expiration, uint48 nonce"),
	{0x94, 0x28, 0x0d, 0x62}: w3.MustNewFunc("ERC20InvalidSpender(address spender)", ""),
	{0x94, 0x5b, 0xce, 0xc9}: w3.MustNewFunc("batchSwap(uint8 swapKind, (bytes32 poolId, uint256 assetInIndex, uint256 assetOutIndex, uint256 amount, bytes data)[] swaps, address[] assets, (address sender, bool fromInternalBalance, address recipient, bool toInternalBalance) funds, int256[] limits, uint256 deadline)", "int256[]"),
	{0x95, 0x4c, 0x1c, 0x0d}: w3.MustNewFunc("buyAssetWithSig(address originator, uint256 minAmount, address receiver, uint256 deadline, bytes signature)", "uint256, uint256"),
	{0x95, 0x9d, 0x6d, 0x29}: w3.MustNewFunc("getSellFee(uint256 grossAmount)", "uint256"),
	{0x95, 0xd8, 0x9b, 0x41}: w3.MustNewFunc("symbol()", "string"),
	{0x96, 0xc6, 0xfd, 0x1e}: w3.MustNewFunc("ERC20InvalidSender(address sender)", ""),
	{0x9a, 0x6f, 0xc8, 0xf5}: w3.MustNewFunc("getRoundData(uint80 roundId)", "uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound"),
	{0x9b, 0xe2, 0xa8, 0x84}: w3.MustNewFunc("canPerform(bytes32 actionId, address account, address where)", "bool"),
	{0x9d, 0xc2, 0x9f, 0xac}: w3.MustNewFunc("burn(address user, uint256 amount)", ""),
	{0xa0, 0x71, 0x2d, 0x68}: w3.MustNewFunc("mint(uint256)", ""),
	{0xa1, 0x6f, 0x5f, 0xd2}: w3.MustNewFunc("cumulativeSum()", "uint256"),
	{0xa2, 0x2c, 0xb4, 0x65}: w3.MustNewFunc("setApprovalForAll(address operator, bool approved)", ""),
	{0xa2, 0x3b, 0xa0, 0x9c}: w3.MustNewFunc("swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, uint256 amountLimit, uint256 deadline, uint256 trackingCode)", "int256 amount0, int256 amount1"),
	{0xa2, 0x62, 0x90, 0x4b}: w3.MustNewFunc("get_registry()", "address"),
	{0xa4, 0x57, 0xc2, 0xd7}: w3.MustNewFunc("decreaseAllowance(address spender, uint256 subtractedValue)", "bool success"),
	{0xa4, 0x98, 0x46, 0x33}: w3.MustNewFunc("crossLmTick(int24 tick, bool zeroForOne)", ""),
	{0xa4, 0xa2, 0x1f, 0xa2}: w3.MustNewFunc("getGrossAmountFromTotalBought(uint256 totalAmount)", "uint256"),
	{0xa6, 0x41, 0x7e, 0xd6}: w3.MustNewFunc("exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy)", ""),
	{0xa7, 0xb7, 0x8c, 0x3c}: w3.MustNewFunc("getAssetPriceInGho(uint256 assetAmount, bool roundUp)", "uint256"),
	{0xa9, 0x05, 0x9c, 0xbb}: w3.MustNewFunc("transfer(address to, uint256 amount)", "bool success"),
	{0xa9, 0xfb, 0xf5, 0x1f}: w3.MustNewFunc("ERC721InvalidApprover(address approver)", ""),
	{0xaa, 0x44, 0x3a, 0xc0}: w3.MustNewFunc("sellAsset(uint256 maxAmount, address receiver)", "uint256, uint256"),
	{0xaa, 0xab, 0xad, 0xc5}: w3.MustNewFunc("getAuthorizer()", "address"),
	{0xad, 0x5c, 0x46, 0x48}: w3.MustNewFunc("WETH()", "address"),
	{0xad, 0x61, 0x5d, 0xec}: w3.MustNewFunc("quote(uint256 amountA, uint256 reserveA, uint256 reserveB)", "uint256 amountB"),
	{0xae, 0x5b, 0x25, 0x40}: w3.MustNewFunc("setApp(bytes32 namespace, bytes32 appId, address app)", ""),
	{0xaf, 0x29, 0x79, 0xeb}: w3.MustNewFunc("removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)", "uint256 amountETH"),
	{0xb0, 0x34, 0x43, 0x04}: w3.MustNewFunc("swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data, uint256 trackingCode)", "int256 amount0, int256 amount1"),
	{0xb6, 0xf9, 0xde, 0x95}: w3.MustNewFunc("swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)", ""),
	{0xb8, 0x8d, 0x4f, 0xde}: w3.MustNewFunc("safeTransferFrom(address from, address to, uint256 tokenId, bytes data)", ""),
	{0xba, 0x9a, 0x7a, 0x56}: w3.MustNewFunc("MINIMUM_LIQUIDITY()", "uint256"),
	{0xba, 0xa2, 0xab, 0xde}: w3.MustNewFunc("removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)", "uint256 amountA, uint256 amountB"),
	{0xba, 0xd1, 0xdc, 0x26}: w3.MustNewFunc("geometric_mean(uint256[3] x)", "uint256"),
	{0xbc, 0x25, 0xcf, 0x77}: w3.MustNewFunc("skim(address to)", ""),
	{0xbe, 0x00, 0xbb, 0xd8}: w3.MustNewFunc("getApp(bytes32 namespace, bytes32 appId)", "address"),
	{0xc3, 0x1b, 0x8d, 0x7a}: w3.MustNewFunc("swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96)", "int256 amount0, int256 amount1"),
	{0xc4, 0x5a, 0x01, 0x55}: w3.MustNewFunc("factory()", "address"),
	{0xc6, 0x61, 0x06, 0x57}: w3.MustNewFunc("coins(uint256 i)", "address"),
	{0xc8, 0x7b, 0x56, 0xdd}: w3.MustNewFunc("tokenURI(uint256 tokenId)", "string"),
	{0xc9, 0xc6, 0x53, 0x96}: w3.MustNewFunc("createPair(address tokenA, address tokenB)", "address pair"),
	{0xca, 0x15, 0xc8, 0x73}: w3.MustNewFunc("getRoleMemberCount(bytes32 role)", "uint256"),
	{0xca, 0xb4, 0x6b, 0xc6}: w3.MustNewFunc("setSwapFreeze(bool enable)", ""),
	{0xce, 0x7d, 0x65, 0x03}: w3.MustNewFunc("exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth, address receiver)", "uint256"),
	{0xce, 0xa9, 0xd2, 0x6f}: w3.MustNewFunc("rescueTokens(address token, address to, uint256 amount)", ""),
	{0xd0, 0x6c, 0xa6, 0x1f}: w3.MustNewFunc("getAmountsOut(uint256 amountIn, address[] path)", "uint256[] amounts"),
	{0xd0, 0xc9, 0x3a, 0x7c}: w3.MustNewFunc("tickSpacing()", "int24"),
	{0xd0, 0xe3, 0x0d, 0xb0}: w3.MustNewFunc("deposit()", ""),
	{0xd2, 0x12, 0x20, 0xa7}: w3.MustNewFunc("token1()", "address"),
	{0xd5, 0x05, 0xac, 0xcf}: w3.MustNewFunc("permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)", ""),
	{0xd5, 0x47, 0x74, 0x1f}: w3.MustNewFunc("revokeRole(bytes32 role, address account)", ""),
	{0xdd, 0x62, 0xed, 0x3e}: w3.MustNewFunc("allowance(address owner, address spender)", "uint256"),
	{0xdd, 0xc1, 0xf5, 0x9d}: w3.MustNewFunc("exchange(int128 i, int128 j, uint256 dx, uint256 min_dy, address receiver)", ""),
	{0xdd, 0xca, 0x3f, 0x43}: w3.MustNewFunc("fee()", "uint24"),
	{0xde, 0x28, 0x73, 0x59}: w3.MustNewFunc("acl()", "address"),
	{0xde, 0xd9, 0x38, 0x2a}: w3.MustNewFunc("removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)", "uint256 amountToken, uint256 amountETH"),
	{0xe4, 0x49, 0x02, 0x2e}: w3.MustNewFunc("uniswapV3Swap(uint256 amount, uint256 minReturn, uint256[] pools)", "uint256 returnAmount"),
	{0xe4, 0x50, 0xd3, 0x8c}: w3.MustNewFunc("ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)", ""),
	{0xe6, 0x02, 0xdf, 0x05}: w3.MustNewFunc("ERC20InvalidApprover(address approver)", ""),
	{0xe6, 0xa4, 0x39, 0x05}: w3.MustNewFunc("getPair(address tokenA, address tokenB)", "address pair"),
	{0xe8, 0xe3, 0x37, 0x00}: w3.MustNewFunc("addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)", "uint256 amountA, uint256 amountB, uint256 liquidity"),
	{0xe9, 0x85, 0xe9, 0xc5}: w3.MustNewFunc("isApprovedForAll(address owner, address operator)", "bool"),
	{0xeb, 0x8d, 0x21, 0x16}: w3.MustNewFunc("transferTokens((address from, address receiver, address[] tokens, uint256[] amounts, uint256[] nftIds, bytes tokenTransferTypes, uint16 fillPercent) transferData)", ""),
	{0xec, 0x44, 0x2f, 0x05}: w3.MustNewFunc("ERC20InvalidReceiver(address receiver)", ""),
	{0xec, 0x98, 0x37, 0x76}: w3.MustNewFunc("settleWithPermitsSignatures((address taker, address receiver, uint256 expiry, uint256 nonce, address executor, uint16 minFillPercent, bytes32 hooksHash, address[] sellTokens, address[] buyTokens, uint256[] sellAmounts, uint256[] buyAmounts, uint256[] sellNFTIds, uint256[] buyNFTIds, bytes sellTokenTransfers, bytes buyTokenTransfers) order, (uint8 type, bytes signatureBytes) signature, (bytes[] permitSignatures, bytes signatureBytesPermit2, uint48[] noncesPermit2, uint48 deadline) takerPermitsInfo, (bool result, address to, uint256 value, bytes data)[] interactions, ((bool result, address to, uint256 value, bytes data)[] beforeSettle, (bool result, address to, uint256 value, bytes data)[] afterSettle) hooks, (address balanceRecipient, uint16 curFillPercent) solverData)", ""),
	{0xf2, 0xfd, 0xe3, 0x8b}: w3.MustNewFunc("transferOwnership(address newOwner)", ""),
	{0xf3, 0x05, 0x83, 0x99}: w3.MustNewFunc("feeGrowthGlobal0X128()", "uint256"),
	{0xf3, 0x05, 0xd7, 0x19}: w3.MustNewFunc("addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)", "uint256 amountToken, uint256 amountETH, uint256 liquidity"),
	{0xf4, 0x2c, 0x56, 0xc2}: w3.MustNewFunc("cbrt(uint256 x)", "uint256"),
	{0xf4, 0x93, 0xca, 0x70}: w3.MustNewFunc("sellAssetWithSig(address originator, uint256 maxAmount, address receiver, uint256 deadline, bytes signature)", "uint256, uint256"),
	{0xf8, 0x51, 0xa4, 0x40}: w3.MustNewFunc("admin()", "address"),
	{0xfa, 0x18, 0x04, 0x2d}: w3.MustNewFunc("reduction_coefficient(uint256[3] x, uint256 fee_gamma)", "uint256"),
	{0xfa, 0x46, 0x1e, 0x33}: w3.MustNewFunc("uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data)", ""),
	{0xfa, 0x6e, 0x67, 0x1d}: w3.MustNewFunc("setRelayerApproval(address sender, address relayer, bool approved)", ""),
	{0xfb, 0x3b, 0xdb, 0x41}: w3.MustNewFunc("swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline)", "uint256[] amounts"),
	{0xfb, 0x8f, 0x41, 0xb2}: w3.MustNewFunc("ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)", ""),
	{0xfc, 0x0c, 0x54, 0x6a}: w3.MustNewFunc("token()", "address"),
	{0xfd, 0xef, 0x91, 0x06}: w3.MustNewFunc("hasPermission(address who, address where, bytes32 what, bytes how)", "bool"),
	{0xfe, 0xaf, 0x96, 0x8c}: w3.MustNewFunc("latestRoundData()", "uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound"),
	{0xfe, 0xc9, 0x0d, 0x72}: w3.MustNewFunc("hasApprovedRelayer(address user, address relayer)", "bool"),
	{0xff, 0xf6, 0xca, 0xe9}: w3.MustNewFunc("sync()", ""),
}
